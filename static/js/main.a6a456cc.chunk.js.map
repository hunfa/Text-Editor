{"version":3,"sources":["components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","_ref","title","handledarkmode","mode","react_default","a","createElement","className","concat","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","class","onClick","role","style","color","for","Textform","_useState","useState","_useState2","Object","slicedToArray","text","settext","htmlFor","backgroundColor","rows","value","onChange","e","target","console","log","newtext","toUpperCase","navigator","clipboard","writeText","split","filter","word","length","App","setmode","Fragment","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a6a456cc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function NavBar({title,handledarkmode,mode}) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"/\">About</a>\r\n          </li>\r\n        \r\n        \r\n        </ul>\r\n        <div class=\"form-check form-switch\">\r\n  <input onClick={handledarkmode} class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label style={{color:mode===\"dark\"?\"white\":\"black\"}} class=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n    \r\n  </nav>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useState } from 'react';\r\n\r\nexport default function Textform({mode}) {\r\n\r\n\r\n  const handleupclick = () => {\r\n    console.log(text);\r\n    const newtext = text.toUpperCase();\r\n    settext(newtext);\r\n  }\r\n\r\n  const handleclearclick = () => {\r\n    settext(\"\");\r\n  }\r\n\r\n  const handlecopyclick=()=>{\r\n   \r\n    navigator.clipboard.writeText(text);\r\n  }\r\n\r\n  function handlechange(e) {\r\n    \r\n    settext(e.target.value);\r\n    // console.log(text);\r\n   \r\n  }\r\n\r\n  \r\n\r\n  const [text, settext] = useState(\"\");\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div className=\"mb-3\">\r\n        <label style={{color:mode===\"dark\"?\"white\":\"black\"}} htmlFor=\"box1\" className=\"form-label\">Enter Text</label>\r\n        <textarea style={{color:mode===\"dark\"?\"white\":\"black\",backgroundColor:mode===\"dark\"?\"#101010\":\"white\"}} className=\"form-control\" id=\"box1\" rows=\"10\" value={text} onChange={handlechange}></textarea>\r\n      </div>\r\n      <button type=\"button\" onClick={handleupclick} className=\"btn btn-primary\">To Uppercase</button>\r\n      <button type=\"button\" onClick={handlecopyclick} className=\"btn btn-primary mx-2\">Copy Text</button>\r\n      <button type=\"button\" onClick={handleclearclick} className=\"btn btn-danger mx-2\">Reset</button>\r\n      \r\n\r\n      <p style={{color:mode===\"dark\"?\"white\":\"black\"}} className='my-3'>Words = {text.split(\" \").filter(word => word !== '').length}  Characters={text.length}</p>\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n","\nimport { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar.js'\nimport Textform from './components/Textform.js'\nimport React  from 'react';\n\nfunction App() {\n\n  const [mode, setmode] = useState(\"light\")\n\n  const handledarkmode = () => {\n    if (mode === \"dark\") {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n    else {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#2a3150\";\n    }\n  }\n\n  return (\n    \n    <>\n      <Navbar title=\"TextEditor\" mode={mode} handledarkmode={handledarkmode} />\n      <Textform mode={mode} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}